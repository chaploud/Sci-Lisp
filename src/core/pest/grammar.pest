COMMENT = _{ ";" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
WHITESPACE = _{ " " | "\t" | "\r" | "\n" | "," }

prefix_char = _{ "#" | "'" | "`" | "~" | "~@" | ":" | "@" | "\\" }
special_char = _{ "!" | "$" | "%" | "&" | "-" | "=" | "^" | "|" | "+" | "*" | "<" | ">" | "?" | "_"}
separation_char = _{"/" | "."}

identifier = _{ ( ASCII_ALPHA | special_char) ~ (ASCII_ALPHANUMERIC | special_char)* }

nil = @{ "nil" }
bool = @{ "true" | "false" }
f64 = @{ pm? ~ "." ~ digit ~ (digit | "_")* ~ exp? |  // -.0_0e5
         i64 ~ "." ~ i64? ~ exp? |                    // +0_2.0_2e-2, 2.
         i64 ~ exp |                                  // -0_2e+02
         nan |
         inf }
  digit = _{ ASCII_DIGIT }
  pm = _{ ("-" | "+") }
  exp = _{ ^"e" ~ i64 }
  nan = _{ "nan" }
  inf = _{ pm? ~ "inf" }
i64 = @{ pm? ~ digit ~ (digit | "_")* }
symbol = @{ identifier }
keyword = @{ ":" ~ identifier}
regex = { "#\"" ~ (!"\"" ~ ANY)* ~ "\"" }
string = { "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

list = { "(" ~ expr* ~ ")" }
vector = { "[" ~ expr* ~ "]" }
hashmap = { "{" ~ (expr ~ expr)* ~ "}" }
hashset = { "#{" ~ expr* ~ "}" }

expr = _{ nil | bool | i64 | f64 | symbol | keyword | regex | string | list | vector | hashmap | hashset }

scilisp = { SOI ~ expr* ~ EOI}

// TODO:
// (')quote
// (`)backquote
// (~)unquote
// (~@)unquote-splicing
// (@)apply(expand)
// (.)dot
// def
// const
// ([0:2])([-1])slice
// let
// set!
// defn(def + fn)
// fn
// if
// do
// when(if + do) // not needed?
// cond
// switch
// for
// while
// break
// continue
// class
// struct
// enum
// macro
